//______________Top System ______________:
inputs: load,Data_in[12],CLK,RST

outputs:Data_out[12] ,valid_output 


// values for filter taps
h0=12'b 000000100000
h1=12'b 111111110000
h2=12'b 000000001010
h3=12'b 111111111100




//******** BIT_SYNCHONIZER*************

	input    CLK
	input    RST
	input    load
	output   load_sync

//LOGIC design: 
inernal flipflop reg_sync[2] 

every +ve CLK or -ve RST
 
  if(!RST)     
    {
	  reg_sync=0
	}
     
   
  else
   {
	reg_sync[0]=reg_sync[1]
	reg_sync[1] = load 
   }
   
we make this connectection :
load_sync =  reg_sync[0]






//***************shift_reg *********

	input 			CLK 			
	input 			RST 		  	
	input 			shift_load_en 	
	input  	           Data_in 		
	output 	           shift_reg_out[48]


//LOGIC design: 
every +ve CLK or -ve RST {
if (!RST)
{
	shift_reg_out = 0 
}

else if (shift_load_en){
	//SHIFT RIGHT & CAPTURE Inputs
	shift_reg_out[11:0]  = shift_reg_out[23:12] 
	shift_reg_out[23:12] = shift_reg_out[24:35] 
	shift_reg_out[24:35] = shift_reg_out[47:36] 
	shift_reg_out[47:36] = Data_in
	
}
else
	// retain old value
	shift_reg_out =shift_reg_out 

}
 
 
//***************MUX1*************: 
inputs: h0,h1,h2,h3,select_mux_1

output:h_i[12]

//LOGIC design: 
case(select_mux_2)
0: h_i= h0
1: h_i= h1
2: h_i= h2
3: h_i= h3

     
//***************MUX2*************: 
inputs: shift_reg_out[11:0],shift_reg_out[23:12],
shift_reg_out[24:35],shift_reg_out[47:36],select_mux_2


output: D_i[12]

//LOGIC design: 
case(select_mux_2)
0: D_i= shift_reg_out[11:0]
1: D_i= shift_reg_out[23:12]
2: D_i= shift_reg_out[24:35]
3: D_i= shift_reg_out[47:36]
	


//******************* multilpier block *************
	input 	D_i,h_i
	output  mul_out[24]
	
	
	//LOGIC design: 
	while(1){
		mul_out = D_i*h_i
	}
	


//************ adder_block************
		
		input 	CLK			
		input   RST		
		input   adder_en	
		input 	mul_out[11:0],Data_out_ff  // we trim MSB from multilpier output			
		output 	Data_out


//LOGIC design: 
every +ve CLK edge or -ve RST edge {
	if(!RST)
		Data_out=0
	else
	{
		if(adder_en)
		{
			Data_out = mul_out + [11:0],Data_out_ff  
		}
		else
		{
			Data_out=mul_out 
		}
	
	
	}

}



//**************Finite State Machine************************//
	input 	CLK  			
	input   RST  			
	input   load_sync 			
	output  adder_en,valid_output
	output 	select_mux_1	  
	output  select_mux_2	
	output  shift_load_en	
	
	
	
//we start at initial state s0 (current_state = s0) until Load_Sig is asserted

//every clock edge we make current_state = next_state

// also we go to s0 on a -ve edge reset


case(current_state)
s0:
// ctrl signals :
adder_en  		= 0 
select_mux_1  	= 0 
select_mux_2  	= 0 
valid_output	= 0	

if(load_sync == 1) {
next_state 		= s1
shift_load_en	= 1	

}
else{
next_state 		= s0
shift_load_en	= 0	
}
				
			

s1:
// ctrl signals :
select_mux_1 	= 0 
select_mux_2 	= 0 
shift_load_en 	= 0 
valid_output	= 0	


next_state		= s2   

s2:
// ctrl signals :

select_mux_1 	= 1 
select_mux_2 	= 1 
shift_load_en 	= 0 
valid_output	= 0	

next_state		= s3  

s3:
// ctrl signals :
select_mux_1 	= 2 
select_mux_2 	= 2
shift_load_en 	= 0 
valid_output	= 0	


next_state		= s4   
		
s4:
// ctrl signals :
select_mux_1 	= 3 
select_mux_2 	= 3 
valid_output    = 1 

if(load == 1){
    next_state = s1 
    shift_load_en = 1
} else {
    Next_state = s0 
    Shift_load_en = 0  
}
